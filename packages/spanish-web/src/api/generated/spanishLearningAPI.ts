/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Spanish Learning API
 * API for learning Spanish vocabulary
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetWordsNotLearnedParams,
  PostWordsAnswerBody,
  Word
} from './spanishLearningAPI.schemas'
import { customInstance } from '../mutator/custom-instance';



export const getWords = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Word[]>(
      {url: `/words`, method: 'GET', signal
    },
      );
    }
  

export const getGetWordsQueryKey = () => {
    return [`/words`] as const;
    }

    
export const getGetWordsQueryOptions = <TData = Awaited<ReturnType<typeof getWords>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWords>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWordsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWords>>> = ({ signal }) => getWords(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWords>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWordsQueryResult = NonNullable<Awaited<ReturnType<typeof getWords>>>
export type GetWordsQueryError = unknown


export function useGetWords<TData = Awaited<ReturnType<typeof getWords>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWords>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWords>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWords<TData = Awaited<ReturnType<typeof getWords>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWords>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWords>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWords<TData = Awaited<ReturnType<typeof getWords>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWords>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetWords<TData = Awaited<ReturnType<typeof getWords>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWords>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWordsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get not learned words
 */
export const getWordsNotLearned = (
    params?: GetWordsNotLearnedParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/words/not-learned`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWordsNotLearnedQueryKey = (params?: GetWordsNotLearnedParams,) => {
    return [`/words/not-learned`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWordsNotLearnedQueryOptions = <TData = Awaited<ReturnType<typeof getWordsNotLearned>>, TError = unknown>(params?: GetWordsNotLearnedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsNotLearned>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWordsNotLearnedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWordsNotLearned>>> = ({ signal }) => getWordsNotLearned(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWordsNotLearned>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWordsNotLearnedQueryResult = NonNullable<Awaited<ReturnType<typeof getWordsNotLearned>>>
export type GetWordsNotLearnedQueryError = unknown


export function useGetWordsNotLearned<TData = Awaited<ReturnType<typeof getWordsNotLearned>>, TError = unknown>(
 params: undefined |  GetWordsNotLearnedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsNotLearned>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWordsNotLearned>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWordsNotLearned<TData = Awaited<ReturnType<typeof getWordsNotLearned>>, TError = unknown>(
 params?: GetWordsNotLearnedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsNotLearned>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWordsNotLearned>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWordsNotLearned<TData = Awaited<ReturnType<typeof getWordsNotLearned>>, TError = unknown>(
 params?: GetWordsNotLearnedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsNotLearned>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get not learned words
 */

export function useGetWordsNotLearned<TData = Awaited<ReturnType<typeof getWordsNotLearned>>, TError = unknown>(
 params?: GetWordsNotLearnedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsNotLearned>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWordsNotLearnedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Save answer for a word
 */
export const postWordsAnswer = (
    postWordsAnswerBody: PostWordsAnswerBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/words/answer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postWordsAnswerBody, signal
    },
      );
    }
  


export const getPostWordsAnswerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWordsAnswer>>, TError,{data: PostWordsAnswerBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postWordsAnswer>>, TError,{data: PostWordsAnswerBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWordsAnswer>>, {data: PostWordsAnswerBody}> = (props) => {
          const {data} = props ?? {};

          return  postWordsAnswer(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWordsAnswerMutationResult = NonNullable<Awaited<ReturnType<typeof postWordsAnswer>>>
    export type PostWordsAnswerMutationBody = PostWordsAnswerBody
    export type PostWordsAnswerMutationError = unknown

    /**
 * @summary Save answer for a word
 */
export const usePostWordsAnswer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWordsAnswer>>, TError,{data: PostWordsAnswerBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postWordsAnswer>>,
        TError,
        {data: PostWordsAnswerBody},
        TContext
      > => {

      const mutationOptions = getPostWordsAnswerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get statistics for a word
 */
export const getWordsWordIdStats = (
    wordId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/words/${wordId}/stats`, method: 'GET', signal
    },
      );
    }
  

export const getGetWordsWordIdStatsQueryKey = (wordId: number,) => {
    return [`/words/${wordId}/stats`] as const;
    }

    
export const getGetWordsWordIdStatsQueryOptions = <TData = Awaited<ReturnType<typeof getWordsWordIdStats>>, TError = void>(wordId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsWordIdStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWordsWordIdStatsQueryKey(wordId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWordsWordIdStats>>> = ({ signal }) => getWordsWordIdStats(wordId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(wordId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWordsWordIdStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetWordsWordIdStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getWordsWordIdStats>>>
export type GetWordsWordIdStatsQueryError = void


export function useGetWordsWordIdStats<TData = Awaited<ReturnType<typeof getWordsWordIdStats>>, TError = void>(
 wordId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsWordIdStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWordsWordIdStats>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWordsWordIdStats<TData = Awaited<ReturnType<typeof getWordsWordIdStats>>, TError = void>(
 wordId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsWordIdStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWordsWordIdStats>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetWordsWordIdStats<TData = Awaited<ReturnType<typeof getWordsWordIdStats>>, TError = void>(
 wordId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsWordIdStats>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get statistics for a word
 */

export function useGetWordsWordIdStats<TData = Awaited<ReturnType<typeof getWordsWordIdStats>>, TError = void>(
 wordId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWordsWordIdStats>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetWordsWordIdStatsQueryOptions(wordId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




